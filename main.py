# pip install python-telegram-bot sqlalchemy

import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import IntegrityError
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
Base = declarative_base()


class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True)
    username = Column(String)


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
engine = create_engine("sqlite:///users.db")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv(
    "TELEGRAM_TOKEN", "7916282553:AAEPdjBuj6m4lXvSn6IQVyUqiplV7U6LKOw"
)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = update.effective_user
    new_user = User(
        user_id=user.id, 
        username=f"@{user.username}" if user.username else None
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É\!

–ú—ã —Å–µ–π—á–∞—Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ—é –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ Telegram –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ Telegram ‚Äî –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤\.

üí° –°–µ–π—á–∞—Å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã\. –ú—ã –µ—â—ë –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏, –∏ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å —Ü–µ–Ω–µ–Ω\.

üöÄ *–°–∫–æ—Ä–æ –º—ã –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞*, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –±–æ—Ç —É–∂–µ –∑–∞–ø–∏—Å–∞–ª, —Ç–∞–∫ —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ üôå

*_—Ä–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –º—ã –¥–æ–Ω–µ—Å–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —Ç–æ–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞, —É –Ω–∞—Å –µ—ë –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –∏ –Ω–∏–∫–∞–∫–æ–π –≤—ã–≥–æ–¥—ã –∑–∞ –µ—ë –ø—É–±–ª–∏–∫–∞—Ü–∏—é –º—ã –Ω–µ –∏–º–µ–µ–º_*
"""

    try:
        session.add(new_user)
        session.commit()
        await update.message.reply_text(
            text=welcome_text,
            parse_mode="MarkdownV2"
        )
        logging.info(f"New user: {user.id}")
    except IntegrityError:
        session.rollback()
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü–æ–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ :)")
    finally:
        session.close()


if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.run_polling()
